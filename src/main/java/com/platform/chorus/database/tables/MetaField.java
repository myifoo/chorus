/*
 * This file is generated by jOOQ.
*/
package com.platform.chorus.database.tables;


import com.platform.chorus.database.Keys;
import com.platform.chorus.database.Public;
import com.platform.chorus.database.tables.records.MetaFieldRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MetaField extends TableImpl<MetaFieldRecord> {

    private static final long serialVersionUID = -2079386341;

    /**
     * The reference instance of <code>public.meta_field</code>
     */
    public static final MetaField META_FIELD = new MetaField();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetaFieldRecord> getRecordType() {
        return MetaFieldRecord.class;
    }

    /**
     * The column <code>public.meta_field.fid</code>.
     */
    public final TableField<MetaFieldRecord, Integer> FID = createField("fid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('meta_fields_fid_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.meta_field.name</code>.
     */
    public final TableField<MetaFieldRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.meta_field.type</code>.
     */
    public final TableField<MetaFieldRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.meta_field.owner</code>.
     */
    public final TableField<MetaFieldRecord, Integer> OWNER = createField("owner", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.meta_field.default</code>.
     */
    public final TableField<MetaFieldRecord, String> DEFAULT = createField("default", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.meta_field.unit</code>.
     */
    public final TableField<MetaFieldRecord, String> UNIT = createField("unit", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.meta_field.range</code>.
     */
    public final TableField<MetaFieldRecord, String> RANGE = createField("range", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.meta_field.optional</code>.
     */
    public final TableField<MetaFieldRecord, Boolean> OPTIONAL = createField("optional", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.meta_field.format</code>.
     */
    public final TableField<MetaFieldRecord, String> FORMAT = createField("format", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.meta_field.description</code>.
     */
    public final TableField<MetaFieldRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.meta_field</code> table reference
     */
    public MetaField() {
        this(DSL.name("meta_field"), null);
    }

    /**
     * Create an aliased <code>public.meta_field</code> table reference
     */
    public MetaField(String alias) {
        this(DSL.name(alias), META_FIELD);
    }

    /**
     * Create an aliased <code>public.meta_field</code> table reference
     */
    public MetaField(Name alias) {
        this(alias, META_FIELD);
    }

    private MetaField(Name alias, Table<MetaFieldRecord> aliased) {
        this(alias, aliased, null);
    }

    private MetaField(Name alias, Table<MetaFieldRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MetaFieldRecord, Integer> getIdentity() {
        return Keys.IDENTITY_META_FIELD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MetaFieldRecord> getPrimaryKey() {
        return Keys.META_FIELDS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MetaFieldRecord>> getKeys() {
        return Arrays.<UniqueKey<MetaFieldRecord>>asList(Keys.META_FIELDS_PKEY, Keys.FD_U_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MetaField as(String alias) {
        return new MetaField(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MetaField as(Name alias) {
        return new MetaField(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MetaField rename(String name) {
        return new MetaField(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MetaField rename(Name name) {
        return new MetaField(name, null);
    }
}
