/*
 * This file is generated by jOOQ.
*/
package com.platform.chorus.database.tables;


import com.platform.chorus.database.Keys;
import com.platform.chorus.database.Public;
import com.platform.chorus.database.tables.records.MetaMethodRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MetaMethod extends TableImpl<MetaMethodRecord> {

    private static final long serialVersionUID = 1121371490;

    /**
     * The reference instance of <code>public.meta_method</code>
     */
    public static final MetaMethod META_METHOD = new MetaMethod();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetaMethodRecord> getRecordType() {
        return MetaMethodRecord.class;
    }

    /**
     * The column <code>public.meta_method.mid</code>.
     */
    public final TableField<MetaMethodRecord, Integer> MID = createField("mid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('meta_methods_mid_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.meta_method.name</code>.
     */
    public final TableField<MetaMethodRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.meta_method.result</code>.
     */
    public final TableField<MetaMethodRecord, String> RESULT = createField("result", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.meta_method.argument</code>.
     */
    public final TableField<MetaMethodRecord, String> ARGUMENT = createField("argument", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.meta_method.owner</code>.
     */
    public final TableField<MetaMethodRecord, Integer> OWNER = createField("owner", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.meta_method.description</code>.
     */
    public final TableField<MetaMethodRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.meta_method</code> table reference
     */
    public MetaMethod() {
        this(DSL.name("meta_method"), null);
    }

    /**
     * Create an aliased <code>public.meta_method</code> table reference
     */
    public MetaMethod(String alias) {
        this(DSL.name(alias), META_METHOD);
    }

    /**
     * Create an aliased <code>public.meta_method</code> table reference
     */
    public MetaMethod(Name alias) {
        this(alias, META_METHOD);
    }

    private MetaMethod(Name alias, Table<MetaMethodRecord> aliased) {
        this(alias, aliased, null);
    }

    private MetaMethod(Name alias, Table<MetaMethodRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MetaMethodRecord, Integer> getIdentity() {
        return Keys.IDENTITY_META_METHOD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MetaMethodRecord> getPrimaryKey() {
        return Keys.META_METHODS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MetaMethodRecord>> getKeys() {
        return Arrays.<UniqueKey<MetaMethodRecord>>asList(Keys.META_METHODS_PKEY, Keys.MT_U_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MetaMethod as(String alias) {
        return new MetaMethod(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MetaMethod as(Name alias) {
        return new MetaMethod(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MetaMethod rename(String name) {
        return new MetaMethod(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MetaMethod rename(Name name) {
        return new MetaMethod(name, null);
    }
}
