/*
 * This file is generated by jOOQ.
*/
package com.platform.chorus.db.tables;


import com.platform.chorus.db.Keys;
import com.platform.chorus.db.Public;
import com.platform.chorus.db.tables.records.ClassModelRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClassModel extends TableImpl<ClassModelRecord> {

    private static final long serialVersionUID = 171745576;

    /**
     * The reference instance of <code>public.class_model</code>
     */
    public static final ClassModel CLASS_MODEL = new ClassModel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClassModelRecord> getRecordType() {
        return ClassModelRecord.class;
    }

    /**
     * The column <code>public.class_model.id</code>.
     */
    public final TableField<ClassModelRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('class_model_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.class_model.domain</code>.
     */
    public final TableField<ClassModelRecord, String> DOMAIN = createField("domain", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.class_model.name</code>.
     */
    public final TableField<ClassModelRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.class_model.extend</code>.
     */
    public final TableField<ClassModelRecord, String> EXTEND = createField("extend", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.class_model.label</code>.
     */
    public final TableField<ClassModelRecord, String> LABEL = createField("label", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.class_model.modifier</code>.
     */
    public final TableField<ClassModelRecord, String> MODIFIER = createField("modifier", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.class_model.scope</code>.
     */
    public final TableField<ClassModelRecord, String> SCOPE = createField("scope", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.class_model.description</code>.
     */
    public final TableField<ClassModelRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.class_model</code> table reference
     */
    public ClassModel() {
        this(DSL.name("class_model"), null);
    }

    /**
     * Create an aliased <code>public.class_model</code> table reference
     */
    public ClassModel(String alias) {
        this(DSL.name(alias), CLASS_MODEL);
    }

    /**
     * Create an aliased <code>public.class_model</code> table reference
     */
    public ClassModel(Name alias) {
        this(alias, CLASS_MODEL);
    }

    private ClassModel(Name alias, Table<ClassModelRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClassModel(Name alias, Table<ClassModelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ClassModelRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CLASS_MODEL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ClassModelRecord> getPrimaryKey() {
        return Keys.CLASS_MODEL_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ClassModelRecord>> getKeys() {
        return Arrays.<UniqueKey<ClassModelRecord>>asList(Keys.CLASS_MODEL_PKEY, Keys.CL_U_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClassModel as(String alias) {
        return new ClassModel(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClassModel as(Name alias) {
        return new ClassModel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClassModel rename(String name) {
        return new ClassModel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClassModel rename(Name name) {
        return new ClassModel(name, null);
    }
}
