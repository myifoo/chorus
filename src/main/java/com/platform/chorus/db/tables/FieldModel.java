/*
 * This file is generated by jOOQ.
*/
package com.platform.chorus.db.tables;


import com.platform.chorus.db.Keys;
import com.platform.chorus.db.Public;
import com.platform.chorus.db.tables.records.FieldModelRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FieldModel extends TableImpl<FieldModelRecord> {

    private static final long serialVersionUID = -1115691614;

    /**
     * The reference instance of <code>public.field_model</code>
     */
    public static final FieldModel FIELD_MODEL = new FieldModel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FieldModelRecord> getRecordType() {
        return FieldModelRecord.class;
    }

    /**
     * The column <code>public.field_model.id</code>.
     */
    public final TableField<FieldModelRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('field_model_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.field_model.owner</code>.
     */
    public final TableField<FieldModelRecord, String> OWNER = createField("owner", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.field_model.name</code>.
     */
    public final TableField<FieldModelRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.field_model.label</code>.
     */
    public final TableField<FieldModelRecord, String> LABEL = createField("label", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.field_model.type</code>.
     */
    public final TableField<FieldModelRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.field_model.unit</code>.
     */
    public final TableField<FieldModelRecord, String> UNIT = createField("unit", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.field_model.range</code>.
     */
    public final TableField<FieldModelRecord, String> RANGE = createField("range", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.field_model.default</code>.
     */
    public final TableField<FieldModelRecord, String> DEFAULT = createField("default", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.field_model.format</code>.
     */
    public final TableField<FieldModelRecord, String> FORMAT = createField("format", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.field_model.optional</code>.
     */
    public final TableField<FieldModelRecord, Boolean> OPTIONAL = createField("optional", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.field_model.configurable</code>.
     */
    public final TableField<FieldModelRecord, Boolean> CONFIGURABLE = createField("configurable", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.field_model.collectible</code>.
     */
    public final TableField<FieldModelRecord, Boolean> COLLECTIBLE = createField("collectible", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.field_model.collector</code>.
     */
    public final TableField<FieldModelRecord, String> COLLECTOR = createField("collector", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.field_model.interval</code>.
     */
    public final TableField<FieldModelRecord, Integer> INTERVAL = createField("interval", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.field_model.description</code>.
     */
    public final TableField<FieldModelRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.field_model</code> table reference
     */
    public FieldModel() {
        this(DSL.name("field_model"), null);
    }

    /**
     * Create an aliased <code>public.field_model</code> table reference
     */
    public FieldModel(String alias) {
        this(DSL.name(alias), FIELD_MODEL);
    }

    /**
     * Create an aliased <code>public.field_model</code> table reference
     */
    public FieldModel(Name alias) {
        this(alias, FIELD_MODEL);
    }

    private FieldModel(Name alias, Table<FieldModelRecord> aliased) {
        this(alias, aliased, null);
    }

    private FieldModel(Name alias, Table<FieldModelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FieldModelRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FIELD_MODEL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FieldModelRecord> getPrimaryKey() {
        return Keys.FIELD_MODEL_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FieldModelRecord>> getKeys() {
        return Arrays.<UniqueKey<FieldModelRecord>>asList(Keys.FIELD_MODEL_PKEY, Keys.FD_U_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldModel as(String alias) {
        return new FieldModel(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FieldModel as(Name alias) {
        return new FieldModel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FieldModel rename(String name) {
        return new FieldModel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FieldModel rename(Name name) {
        return new FieldModel(name, null);
    }
}
