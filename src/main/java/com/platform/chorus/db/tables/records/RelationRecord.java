/*
 * This file is generated by jOOQ.
*/
package com.platform.chorus.db.tables.records;


import com.platform.chorus.db.tables.Relation;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RelationRecord extends TableRecordImpl<RelationRecord> implements Record3<Integer, Integer, Integer> {

    private static final long serialVersionUID = -67669258;

    /**
     * Setter for <code>public.relation.sid</code>.
     */
    public void setSid(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.relation.sid</code>.
     */
    public Integer getSid() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.relation.tid</code>.
     */
    public void setTid(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.relation.tid</code>.
     */
    public Integer getTid() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.relation.type</code>.
     */
    public void setType(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.relation.type</code>.
     */
    public Integer getType() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, Integer, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Relation.RELATION.SID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Relation.RELATION.TID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Relation.RELATION.TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getSid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getTid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component3() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getSid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getTid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RelationRecord value1(Integer value) {
        setSid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RelationRecord value2(Integer value) {
        setTid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RelationRecord value3(Integer value) {
        setType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RelationRecord values(Integer value1, Integer value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RelationRecord
     */
    public RelationRecord() {
        super(Relation.RELATION);
    }

    /**
     * Create a detached, initialised RelationRecord
     */
    public RelationRecord(Integer sid, Integer tid, Integer type) {
        super(Relation.RELATION);

        set(0, sid);
        set(1, tid);
        set(2, type);
    }
}
